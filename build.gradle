// Apply necessary plugins
plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '2.26.0'
}

// Define repositories to fetch dependencies from
repositories {
    mavenCentral()
}

// JavaFX configuration
javafx {
    version = "21"
    modules = ['javafx.controls']
}

// Application configuration
application {
    mainClass = "org.ecsail.BaseApplication"
    mainModule = "Halyard"
    applicationDefaultJvmArgs = [
            '-Djavafx.macosx.embedded=true',
            '-Dprism.order=sw',
            '-Dglass.accessible.force=false',
            '-Dapple.awt.application.appearance=system',
            '-Xdock:name=Halyard'  // Add this line
    ]
}

dependencies {
    implementation 'org.slf4j:slf4j-api:2.0.5'
    implementation 'ch.qos.logback:logback-classic:1.5.6'
    implementation 'ch.qos.logback:logback-core:1.5.6'
    implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.20.0'
    implementation 'org.slf4j:jcl-over-slf4j:2.0.5'
    implementation 'com.github.mwiede:jsch:0.2.7'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.2.0'
    implementation 'org.springframework:spring-jdbc:6.1.8'
    implementation 'com.itextpdf:itext7-core:7.2.6'
    implementation 'com.itextpdf:layout:7.2.6'
}

// JLink plugin configuration for creating custom runtime images
jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'Halyard'
    }
}
// Configure source sets for the project
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure copy tasks to include duplicates
tasks.withType(Copy) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Add compiler arguments to display deprecation and unchecked warnings
tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:deprecation'
    options.compilerArgs << '-Xlint:unchecked'
}